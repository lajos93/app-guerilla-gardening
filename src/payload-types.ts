/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    navigation: Navigation;
    users: User;
    media: Media;
    species: Species;
    trees: Tree;
    pages: Page;
    sections: Section;
    'species-categories': SpeciesCategory;
    'species-category-icons': SpeciesCategoryIcon;
    'category-groups': CategoryGroup;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    navigation: NavigationSelect<false> | NavigationSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    species: SpeciesSelect<false> | SpeciesSelect<true>;
    trees: TreesSelect<false> | TreesSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    sections: SectionsSelect<false> | SectionsSelect<true>;
    'species-categories': SpeciesCategoriesSelect<false> | SpeciesCategoriesSelect<true>;
    'species-category-icons': SpeciesCategoryIconsSelect<false> | SpeciesCategoryIconsSelect<true>;
    'category-groups': CategoryGroupsSelect<false> | CategoryGroupsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    logo: Logo;
    theme: Theme;
  };
  globalsSelect: {
    logo: LogoSelect<false> | LogoSelect<true>;
    theme: ThemeSelect<false> | ThemeSelect<true>;
  };
  locale: 'hu' | 'en';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigation".
 */
export interface Navigation {
  id: number;
  label: string;
  url: string;
  order: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "species".
 */
export interface Species {
  id: number;
  /**
   * Original ID from JSON data
   */
  bpId: string;
  name: string;
  latinName?: string | null;
  category?: (number | null) | SpeciesCategory;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "species-categories".
 */
export interface SpeciesCategory {
  id: number;
  name: string;
  latinName: string;
  isPriority?: boolean | null;
  icon?: (number | null) | SpeciesCategoryIcon;
  group?: (number | null) | CategoryGroup;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "species-category-icons".
 */
export interface SpeciesCategoryIcon {
  id: number;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    icon?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "category-groups".
 */
export interface CategoryGroup {
  id: number;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "trees".
 */
export interface Tree {
  id: number;
  supplyId?: string | null;
  species: number | Species;
  lat: number;
  lon: number;
  county?: string | null;
  storeNumber?: number | null;
  details?: {
    dataOwner?: string | null;
    height?: number | null;
    trunkHeight?: number | null;
    trunkDiameter?: number | null;
    crownDiameter?: number | null;
    district?: string | null;
    street?: string | null;
    streetNumber?: string | null;
    parcelNumber?: string | null;
    fokertId?: string | null;
  };
  photo?: (number | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  slug?: string | null;
  /**
   * If checked, this page will be used as the homepage ("/").
   */
  isRoot?: boolean | null;
  published?: boolean | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
  };
  layout?:
    | (
        | {
            anchor?: string | null;
            backgroundImage: number | Media;
            mobileBackgroundImage?: (number | null) | Media;
            lowResBackgroundImageBase64?: string | null;
            title: string;
            subtitle?: string | null;
            ctaButtons?:
              | {
                  label?: string | null;
                  target?: string | null;
                  style?: ('primary' | 'secondary') | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'hero';
          }
        | {
            anchor?: string | null;
            backgroundColor: string;
            title: string;
            titleHighlight?: string | null;
            richDescription?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'about';
          }
        | {
            anchor?: string | null;
            titleBackgroundColor?: string | null;
            titleTextColor?: string | null;
            extendedTitleTextColor?: string | null;
            /**
             * Toggle to show or hide the divider after this block that connects with the next block.
             */
            showDivider?: boolean | null;
            sections?: (number | null) | Section;
            latitude: number;
            longitude: number;
            zoomLevel: number;
            markerLabel?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'map';
          }
        | {
            backgroundColor: string;
            missionTitle?: string | null;
            missionItems?: (number | Section)[] | null;
            /**
             * Toggle to show or hide the divider after this block that connects with the next block.
             */
            showDivider?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'missions';
          }
        | {
            missions: {
              backgroundColor: string;
              missionTitle?: string | null;
              missionItems?: (number | Section)[] | null;
              /**
               * Toggle to show or hide the divider after this block that connects with the next block.
               */
              showDivider?: boolean | null;
            };
            map: {
              anchor?: string | null;
              titleBackgroundColor?: string | null;
              titleTextColor?: string | null;
              extendedTitleTextColor?: string | null;
              /**
               * Toggle to show or hide the divider after this block that connects with the next block.
               */
              showDivider?: boolean | null;
              sections?: (number | null) | Section;
              latitude: number;
              longitude: number;
              zoomLevel: number;
              markerLabel?: string | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'interactiveMapWithMissions';
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sections".
 */
export interface Section {
  id: number;
  title: string;
  extendedTitle?: string | null;
  slug: string;
  /**
   * Only one section can be set as default. This will be used for the default section in the app.
   */
  isDefault?: boolean | null;
  published?: boolean | null;
  icon?: (number | null) | Media;
  description?: string | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'navigation';
        value: number | Navigation;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'species';
        value: number | Species;
      } | null)
    | ({
        relationTo: 'trees';
        value: number | Tree;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'sections';
        value: number | Section;
      } | null)
    | ({
        relationTo: 'species-categories';
        value: number | SpeciesCategory;
      } | null)
    | ({
        relationTo: 'species-category-icons';
        value: number | SpeciesCategoryIcon;
      } | null)
    | ({
        relationTo: 'category-groups';
        value: number | CategoryGroup;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigation_select".
 */
export interface NavigationSelect<T extends boolean = true> {
  label?: T;
  url?: T;
  order?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "species_select".
 */
export interface SpeciesSelect<T extends boolean = true> {
  bpId?: T;
  name?: T;
  latinName?: T;
  category?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "trees_select".
 */
export interface TreesSelect<T extends boolean = true> {
  supplyId?: T;
  species?: T;
  lat?: T;
  lon?: T;
  county?: T;
  storeNumber?: T;
  details?:
    | T
    | {
        dataOwner?: T;
        height?: T;
        trunkHeight?: T;
        trunkDiameter?: T;
        crownDiameter?: T;
        district?: T;
        street?: T;
        streetNumber?: T;
        parcelNumber?: T;
        fokertId?: T;
      };
  photo?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  isRoot?: T;
  published?: T;
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
      };
  layout?:
    | T
    | {
        hero?:
          | T
          | {
              anchor?: T;
              backgroundImage?: T;
              mobileBackgroundImage?: T;
              lowResBackgroundImageBase64?: T;
              title?: T;
              subtitle?: T;
              ctaButtons?:
                | T
                | {
                    label?: T;
                    target?: T;
                    style?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        about?:
          | T
          | {
              anchor?: T;
              backgroundColor?: T;
              title?: T;
              titleHighlight?: T;
              richDescription?: T;
              id?: T;
              blockName?: T;
            };
        map?:
          | T
          | {
              anchor?: T;
              titleBackgroundColor?: T;
              titleTextColor?: T;
              extendedTitleTextColor?: T;
              showDivider?: T;
              sections?: T;
              latitude?: T;
              longitude?: T;
              zoomLevel?: T;
              markerLabel?: T;
              id?: T;
              blockName?: T;
            };
        missions?:
          | T
          | {
              backgroundColor?: T;
              missionTitle?: T;
              missionItems?: T;
              showDivider?: T;
              id?: T;
              blockName?: T;
            };
        interactiveMapWithMissions?:
          | T
          | {
              missions?:
                | T
                | {
                    backgroundColor?: T;
                    missionTitle?: T;
                    missionItems?: T;
                    showDivider?: T;
                  };
              map?:
                | T
                | {
                    anchor?: T;
                    titleBackgroundColor?: T;
                    titleTextColor?: T;
                    extendedTitleTextColor?: T;
                    showDivider?: T;
                    sections?: T;
                    latitude?: T;
                    longitude?: T;
                    zoomLevel?: T;
                    markerLabel?: T;
                  };
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sections_select".
 */
export interface SectionsSelect<T extends boolean = true> {
  title?: T;
  extendedTitle?: T;
  slug?: T;
  isDefault?: T;
  published?: T;
  icon?: T;
  description?: T;
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "species-categories_select".
 */
export interface SpeciesCategoriesSelect<T extends boolean = true> {
  name?: T;
  latinName?: T;
  isPriority?: T;
  icon?: T;
  group?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "species-category-icons_select".
 */
export interface SpeciesCategoryIconsSelect<T extends boolean = true> {
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        icon?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "category-groups_select".
 */
export interface CategoryGroupsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "logo".
 */
export interface Logo {
  id: number;
  logo: number | Media;
  altText: string;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "theme".
 */
export interface Theme {
  id: number;
  /**
   * Hex color code, e.g. #4f5f21
   */
  primary?: string | null;
  /**
   * Hex color code, e.g. #eef2e0
   */
  primary100?: string | null;
  /**
   * Hex color code, e.g. #4f5f21
   */
  primary500?: string | null;
  /**
   * Hex color code, e.g. #3a4518
   */
  primary700?: string | null;
  /**
   * Hex color code, e.g. #161616
   */
  black?: string | null;
  /**
   * Hex color code, e.g. #e9e9db
   */
  surface500?: string | null;
  /**
   * Hex color code, e.g. #646463
   */
  muted500?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "logo_select".
 */
export interface LogoSelect<T extends boolean = true> {
  logo?: T;
  altText?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "theme_select".
 */
export interface ThemeSelect<T extends boolean = true> {
  primary?: T;
  primary100?: T;
  primary500?: T;
  primary700?: T;
  black?: T;
  surface500?: T;
  muted500?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}